	;モジュール
	#include "forsythia.as"
	#include "d3m.hsp"

	#module	;回転用変換命令
		#defcfunc rad2fr double p1
			return int((double(1<<16)*p1)/(M_PI*2))
	#global

	#define title_name "Paint Attack! v0.00"	;タイトル

	#define MAX_P 6	;最大人数

	#define M_move 0	;移動モーション
	#define M_stop 1	;待機モーション

	#define C_man 0
	#define C_map0 6	;床
	#define C_map1 7	;壁

	#define C_sbn 8	;シート

	#define L_NUM 1000	;移動量定数

	#define D_MODE 0	;デバッグモード

	bgscr 0,ginfo(20),ginfo(21),,0,0	;画面初期化
	if (D_MODE == 1){ screen 1,300,600,,0,0 : gsel 0 }

	fr_init	;fr初期化

	; 平行光源
	fr_addlight    0, D3DLIGHT_DIRECTIONAL
	fr_setlightdir 0, -10<<16, -1<<16, -1<<16
	fr_setlightcol 0, 1<<16, 1<<16, 1<<16
	fr_setlightspq 0, 1<<16, 1<<16, 1<<16

	fr_addlight    1, D3DLIGHT_DIRECTIONAL
	fr_setlightdir 1, 1<<16, -1<<16, 1<<16
	fr_setlightcol 1, 1<<16, 1<<16, 1<<16
	fr_setlightspq 1, 1<<16, 1<<16, 1<<16

	; モデルデータの読み込み
	fr_load "./model/man.x", C_man
	if stat : dialog "ファイル[./model/man.x]が見つかりません" : end
	fr_load "./stage/stage1-0.x", C_map0	;床
	if stat : dialog "ファイルが見つかりません" : end
	fr_load "./stage/stage1-1.x", C_map1	;壁
	if stat : dialog "ファイルが見つかりません" : end

	; レンダリング設定
	fr_setrs D3DRS_ALPHABLENDENABLE, 1
	fr_setrs D3DRS_SPECULARENABLE, 1
	fr_bgcolor 0x00, 0x00, 0x40


	dim P_man,10	;キャラクターのパラメータ
	P_man(6) = 1<<16, 1<<16, 1<<16	;サイズ

	dim P_map,10	;マップのパラメータ
	P_map = 0,0,0, 0,0,0, 1<<16,1<<16,1<<16
	fr_setposture P_map, C_map0	;パラメータを適用
	fr_setposture P_map, C_map1

	;パラメータの初期値等
	x = 0 : y = 1<<16 : z = -4<<16 : crx = 0.0 : cry = 0.0
	mov = 2*L_NUM	;移動量

	;マップのサイズ
	map_x = 15
	map_y = 9

	;マップデータとモデル読み込み
	k_cnt = C_sbn
	repeat map_y
		repeat map_x
			dim P_set,10
			P_set = -(((k_cnt-C_sbn)/2)\map_x)*(1<<16),10,-(((k_cnt-C_sbn)/2)/map_x)*(1<<16), 0,0,0, 1<<16,1<<16,1<<16
			fr_load "./stage/r_seat.x", k_cnt
			if stat : dialog "ファイル[./stage/r_seat.x]が見つかりません" : end
			fr_setposture P_set, k_cnt
			fr_load "./stage/b_seat.x", k_cnt+1
			if stat : dialog "ファイル[./stage/b_seat.x]が見つかりません" : end
			fr_setposture P_set, k_cnt+1
			k_cnt += 2
			boxf 0,ginfo(13)-10,ginfo(12)*(k_cnt-C_sbn)/(map_x*map_y*2),ginfo(13)
			pos ginfo(12)-90,ginfo(13)-30 : mes "Loading..."
		loop
	loop

	;マップの色識別フラグ
	dim dr_flag, map_x*map_y

	mouse -1	;カーソルの非表示
	allcnt = 0	;カウント用変数

*main
	stick bt
	if bt&128 : end
	if bt=16 : gra = -2*L_NUM
	if bt=32 : gra = 0 : y = 0

	;移動
	getkey k_up,'W'
	if (k_up == 1){ x += double(mov)*sin(crx) : z += double(mov)*cos(crx) }
	getkey k_dw,'S'
	if (k_dw == 1){ x -= double(mov)*sin(crx) : z -= double(mov)*cos(crx) }
	getkey k_ri,'D'
	if (k_ri == 1){ x += double(mov)*cos(crx) : z -= double(mov)*sin(crx) }
	getkey k_le,'A'
	if (k_le == 1){ x -= double(mov)*cos(crx) : z += double(mov)*sin(crx) }

	;モーションの起動、停止
	if (k_up+k_dw+k_ri+k_le == 0){ P_man(9) = 0 } else { P_man(9) += 2*L_NUM }

	;カーソル座標取得
	cam_mx = ginfo_winx/2-mousex
	crx -= double(cam_mx)/600
	cam_my = ginfo_winy/2-mousey
	cry -= double(cam_my)/600

	;カーソル設定
	mouse -1
	mouse ginfo_winx/2,ginfo_winy/2

	; カメラ設定
	fr_setcampos x+double(-2<<16)*sin(crx), y+double(1<<16)*sin(cry), z+double(-2<<16)*cos(crx)
	ry = rad2fr(crx) 
	fr_setcamtarget x, y, z

	;当たり判定（床）
	dim P_check,9
	P_check = x, y, z, 0, -1<<16, 0
	fr_intersect P_check, C_map0
	if (P_check(7) > -1){
		if (gra >= P_check(6)){
			y -= P_check(6) : gra = 0
		} else {
			y -= gra
			gra += L_NUM/10
		}
		if (P_check(6) == 0){
			dr_flag((P_check(7)/2)) = 1
		}
	}

	;キャラクターのパラメータ設定
	P_man = x, y, z, rx, ry, rz

	;描写（わざとラグを発生させる）
	if (all_cnt\3 == 0){
		fr_begin
			fr_setposture P_man, C_man : fr_draw C_man
			fr_draw C_map0
			fr_draw C_map1
			repeat map_x*map_y
				if (dr_flag(cnt) == 1){ fr_draw cnt*2+C_sbn }
			loop
		fr_end
	}

	////////////////////

	if (D_MODE == 1){
		gsel 1 : cls
			mes abs(x*2-(1<<16))/(2<<16)
			mes y
			mes abs(z*2-(1<<16))/(2<<16)
			mes
			mes "n : "+str(P_check(7)/2)
			mes "x : "+str((P_check(7)/2)\map_x)
			mes "y : "+str(P_check(7)/(map_x*2))
		gsel 0
	}

	////////////////////

	all_cnt++	;カウント加算
	await 1000/60	;FPSは60
	
	goto *main


	stop


